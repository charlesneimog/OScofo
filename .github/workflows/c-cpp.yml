---
name: C/C++ CI
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['**/*.cpp', '**/*.hpp', '**/*.yml']
  pull_request:
    branches: [main]
    paths: ['**/*.cpp', '**/*.hpp', '**,*.yml']
env:
  LIBNAME: o.scofo~
  LIBVERSION: 0.1.0
jobs:
  macos-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13]
        precision: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      - name: Install PureData and Deps arm64 Mac
        run: |
          brew install pd
          brew install boost
          brew install pybind11
          brew install tree-sitter
      - name: Build Object for Arm
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPDLIBDIR=./ -DBUILD_ALL=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j $(sysctl -n hw.logicalcpu)
          cmake --install build
          cp ./Resources/tests/bwv-1013.mp3 ./max/
          cp ./Resources/tests/bwv-1013.txt ./max/
      - name: Upload Max Object
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: matrix.precision == '64'
        with:
          name: ${{matrix.os}}
          path: ./max
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-macos-${{matrix.os}}-${{matrix.precision}}
          path: ${{env.LIBNAME}}
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        compiler: [mingw]
        arch: [amd64]
        precision: [32, 64]  # pd double and single float
        # exclude:
        #   - compiler: msvc
        #     precision: 32  # Exclude MSVC for 32-bit precision
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      - if: matrix.compiler == 'mingw'
        name: Set up Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: false
          install: make mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-tree-sitter mingw-w64-x86_64-pybind11
      - name: Install winget
        if: matrix.compiler == 'mingw'
        uses: Cyberboss/install-winget@v1
      - name: Install PureData Float 32
        if: matrix.compiler == 'mingw' && matrix.precision == '32'
        run: |
          winget install -e --id MillerPuckette.PureData --accept-source-agreements
          npm install tree-sitter-cli
      - name: Install PureData Float 64
        if: matrix.compiler == 'mingw' && matrix.precision == '64'
        run: |
          winget install -e --id MillerPuckette.Pd64 --accept-source-agreements
          npm install tree-sitter-cli
      # - name: Clone vcpkg
      #   if: matrix.compiler == 'msvc' && matrix.precision == '64'
      #   uses: actions/checkout@v3
      #   with:
      #     repository: microsoft/vcpkg 
      #     path: vcpkg
      # - name: Bootstrap vcpkg
      #   if: matrix.compiler == 'msvc' && matrix.precision == '64'
      #   run: | 
      #     ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
      # - name: Install boost-math
      #   if: matrix.compiler == 'msvc' && matrix.precision == '64'
      #   run: ./vcpkg/vcpkg install boost-math:x64-windows
      #
      # - name: Configure and build Visual Studio
      #   if: matrix.compiler == 'msvc' && matrix.precision == '64'
      #   run: |
      #     cmake . -B build -DBUILD_PD_OBJECT=OFF -DBUILD_MAX_OBJECT=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="./vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows
      #     cmake --build build
      #     cmake --install build
      #     Copy-Item .\Resources\tests\bwv-1013.mp3 -Destination .\max
      #     Copy-Item .\Resources\tests\bwv-1013.txt -Destination .\max
      - name: Configure and build Mingw
        shell: msys2 {0}
        if: matrix.compiler == 'mingw'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPDLIBDIR=./ -DBUILD_ALL=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --install build
          cp ./Resources/tests/bwv-1013.mp3 ./max/
          cp ./Resources/tests/bwv-1013.txt ./max/
      - name: Upload Max Object
        uses: actions/upload-artifact@v4
        if: matrix.compiler == 'mingw' && matrix.precision == '64'
        continue-on-error: true
        with:
          name: o.scofo~-windows-max
          path: ./max
      - name: Upload
        if: matrix.compiler == 'mingw'
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-f${{ matrix.precision }}-windows-${{ matrix.compiler }}
          path: ${{env.LIBNAME}}
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, aarch64, arm]
        precision: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      - name: PureData Sources
        run: |
          sudo apt update
          sudo add-apt-repository ppa:pure-data/pure-data -y
          sudo apt install puredata -y
          sudo apt install libboost-all-dev
          sudo apt install python3-pybind11 -y
          npm install tree-sitter
      - name: Install aarch64 gcc
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install g++-aarch64-linux-gnu -y
      - name: Install arm gcc
        if: matrix.arch == 'arm'
        run: |
          sudo apt install gcc-arm-linux-gnueabihf -y
          sudo apt install g++-arm-linux-gnueabihf -y
      - name: Build Object
        if: matrix.arch == 'amd64'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DPDLIBDIR=./ -DBUILD_ALL=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- -j$(nproc)
          make install -C build
      - name: Build Object
        if: matrix.arch == 'aarch64'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DPDLIBDIR=./ -DBUILD_ALL=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- -j$(nproc)
          make install -C build
      - name: Build Object
        if: matrix.arch == 'arm'
        run: |
          cmake . -B build -DPD_FLOATSIZE=${{ matrix.precision }} -DCMAKE_SYSTEM_PROCESSOR=arm -DPDLIBDIR=./ -DBUILD_ALL=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- -j$(nproc)
          make install -C build
      - name: Upload Object
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-linux-${{matrix.arch}}-${{matrix.precision}}
          path: ${{env.LIBNAME}}
  package-artifacts:
    needs: [macos-build, windows-build, linux-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.LIBNAME }}-*
          path: artifacts
          merge-multiple: true
      - name: Clear tmp files
        run: rm -f artifacts/*.pdb
        # ──────────────────────────────────────
      - name: Install Deken
        continue-on-error: true
        run: |
          mkdir -p ${PWD}/package
          docker run --rm --user $(id -u) \
          --volume ${PWD}/artifacts:/${{env.LIBNAME}} \
          --volume ${PWD}/package:/package \
          registry.git.iem.at/pd/deken \
          deken package /${{env.LIBNAME}} --output-dir /package -v ${{env.LIBVERSION}} -n ${{env.LIBNAME}}
      - name: Clear Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ env.LIBNAME }}-*
      - name: Upload Deken
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{env.LIBVERSION}}
          path: ./package/
