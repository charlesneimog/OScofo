{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OScofo","text":""},{"location":"#introduction","title":"Introduction","text":"Welcome to the <code>OScofo</code> documentation!  <p><code>OScofo</code> is a OpenSource Score Follower designed with focus on contemporary music. It is based on the research of Arshia Cont and <code>Antescofo</code> team at Ircam. I am developing <code>OScofo</code> because of the possibility to run PureData Patches inside browsers using pd4web.</p> <p>With <code>pd4web</code>, I believe that will be possible decrease the complexity of the setups for live-eletronics music and allows more performers to, at least, taste live-eletronics pieces.</p>"},{"location":"#compositions","title":"Compositions","text":"<p>Part of my PhD Thesis, will be published soon!</p> <p> Composing it yet! </p>"},{"location":"score/actions/","title":"Actions Configuration","text":"<p><code>OScofo</code> support actions as consequences of <code>EVENTS</code>, these actions are very tied with the program where <code>OScofo</code> is running and for now just are supported on <code>PureData</code>. </p> <p>The actions can be run immediately after the <code>EVENT</code> detection or after some delay specified using the <code>delay</code> keyword. There are two types of actions for now <code>sendto</code> and <code>luacall</code>. Both functions can be delay specified as followed: </p>"},{"location":"score/actions/#delayed-messages","title":"Delayed Messages","text":""},{"location":"score/actions/#absolute-time-delay","title":"Absolute time delay","text":"<p>Absolute time are clock time, and they don't change if the performer plays your must faster or slower, always have the same duration.</p> <ul> <li><code>delay 2000 ms</code>: Has a delay of 2 seconds after the <code>EVENT</code> detection.</li> <li><code>delay 2 sec</code>: Has a delay of 2 seconds after the <code>EVENT</code> detection.</li> </ul> <p>For example:</p> <pre><code>NOTE C4 2 \n    delay 2000 ms sendto e1 [1 2 3 4]\n</code></pre> <p>The syntax highlight of the Editor make this easier to read!!!</p> <p>Will send the list <code>1 2 3 4</code> to the receiver <code>e1</code> after 2 seconds. </p>"},{"location":"score/actions/#relative-time-delay","title":"Relative time delay","text":"<p>Relative time are music time, they change if the performer plays your must faster or slower.</p> <ul> <li><code>delay 1 tempo</code>: Has a delay of 1 tempo after the <code>EVENT</code> detection. </li> <li><code>delay 0.5 tempo</code>: Has a delay of 0.5 tempo after the <code>EVENT</code> detection. </li> </ul>"},{"location":"score/actions/#actions","title":"Actions","text":""},{"location":"score/actions/#sendto","title":"<code>sendto</code>","text":"<ul> <li><code>sendto e1</code>: Send a bang to the receiver <code>e1</code></li> <li><code>sendto myreceiver [hello world]</code>: Send <code>hello world</code> to the receiver <code>myreceiver</code>.</li> <li><code>delay 1 tempo sendto e1</code>: Send a bang to the receiver <code>e1</code> after the duration on 1 tempo.</li> </ul>"},{"location":"score/actions/#luacall","title":"<code>luacall</code>","text":"<p>Advanced Users</p> <p>This is designed for advances users, but if you are starting you can ask questions using the <code>OScofo</code> Github Discussions.</p> <p>Lua function are executed immediately after the event detection of after some delay time.</p> <ul> <li><code>luacall(myluafunc(\"hello world\")</code>: Execute the function <code>myluafunc</code> immediately.</li> <li><code>delay 1 tempo luacall(myluafunc(\"hello after 1 tempo\")</code>: Execute the function after 1 tempo.</li> </ul> <p>Lua Functions definition</p> <p>Lua Functions must be defined inside the <code>LUA {}</code>, for example:  <pre><code>LUA {\n    function myluafunc(s)\n        pd.post(s)\n    end\n}\n</code></pre></p>"},{"location":"score/config/","title":"Score Configuration","text":"<p>I chose to make all the configuration from <code>OScofo</code> using the score, this make easier to use the object on different programs. For example, instead of create a lot of code to handle the configuration for <code>Pd</code> object, and another object for <code>Max</code>, I can create a simple one where the composer can config the <code>OScofo</code> using the score. This allows that I use my time to develop the object itself, not the bridge between <code>OScofo</code> and <code>Pd</code>, <code>Max</code> or others.</p> <p>Always try on <code>OScofo</code> Editor</p> <p>Always try the examples on <code>OScofo</code> Online Editor, with highlight this becomes much easier.</p>"},{"location":"score/config/#time-configuration","title":"Time Configuration","text":""},{"location":"score/config/#bpm","title":"<code>BPM</code>","text":"<ul> <li><code>Default is 60</code></li> </ul> <p><code>BPM</code> keyword set the <code>BPM</code> value for the next event.</p> <pre><code>BPM 50\n</code></pre>"},{"location":"score/config/#phasecoupling","title":"<code>PhaseCoupling</code>","text":"<ul> <li><code>Default is 0.5</code></li> <li><code>Range 0-2</code></li> </ul> <p>This value must be between 0 and 2 and captures the amount of force exerted on attentional rhythm, determining, among other factors, the speed at which the coupled system relaxes in relation to the attractor (Large and Jones, 1999, p. 128).</p>"},{"location":"score/config/#syncstrength","title":"<code>SyncStrength</code>","text":"<ul> <li><code>Default is 0.5</code></li> <li><code>Range 0-1</code></li> </ul> <p>The value of \\(\\eta_s\\) (Sync Strength) corresponds to what Large and Jones (1999) refer to as the adaptation rate. This value determines how much of the previous predictions will be considered for the next BPM prediction and must be between 0 and 1. According to Large and Jones (1999, p. 131), \"if it is set to 1, each estimate of \\(\\kappa\\) will be based solely on the current onsets. If \\(\\eta_s\\) &lt; 1, the focus adapts more slowly because the previous context is taken into account\".</p> <pre><code>SyncStrength 0.4\n</code></pre>"},{"location":"score/config/#listening-module-configuration","title":"Listening Module Configuration","text":""},{"location":"score/config/#pitchsigma","title":"<code>PitchSigma</code>","text":"<ul> <li><code>Default is 0.5</code></li> <li><code>Range 0-1</code></li> </ul> <p>Define the</p> <pre><code>PitchSigma 0.2\n</code></pre>"},{"location":"score/config/#entropy","title":"<code>Entropy</code>","text":"<ul> <li><code>Default is 0</code></li> <li><code>Range 0-1</code></li> </ul> <p>Define the min value to entropy to trigger a new event. If they are very similar, the event is not triggered.</p> <pre><code>Entropy 0.02\n</code></pre>"},{"location":"score/config/#audio-configuration","title":"Audio Configuration","text":""},{"location":"score/config/#fftsize","title":"<code>FFTSize</code>","text":"<ul> <li><code>Default is 4096</code></li> <li><code>Must be a power of 2, I recomend 1024, 2048 or 4096</code></li> </ul> <pre><code>FFTSize 4096\n</code></pre>"},{"location":"score/config/#hopsize","title":"<code>HopSize</code>","text":"<ul> <li><code>Default is 1024</code></li> <li><code>Must be a power of 2, I recomend 256, 512 or 1024</code></li> </ul> <pre><code>HopSize 4096\n</code></pre>"},{"location":"score/events/","title":"Events","text":"<p><code>OScofo</code> for now supports four events, <code>NOTE</code>, <code>TRILL</code>, <code>CHORD</code> and <code>REST</code>. Before define then, I need to explain how to represent <code>PITCHES</code> and <code>DURATIONS</code>.</p> <p>Check the MusicXML Importer</p> <p><code>OScofo</code> has a MusicXML importer, it is very accurate and tested on MuseScore and Sibelius (but should work for all major programs). </p>"},{"location":"score/events/#pitches-and-durations","title":"Pitches and Durations","text":""},{"location":"score/events/#pitch","title":"<code>PITCH</code>","text":"<p>On OScofo pitches are represented by <code>name</code> or <code>MIDI</code>.</p> <ul> <li><code>NOTENAME</code>: Things like <code>C4</code>, <code>Db5</code>, <code>C#5</code>, <code>Gb5</code>, etc...</li> <li><code>MIDI</code>: Normal <code>MIDI</code>. 60 for <code>C4</code>, 67 for <code>G4</code>, etc...</li> </ul>"},{"location":"score/events/#duration","title":"<code>DURATION</code>","text":"<p>Different from <code>Antescofo</code>, on <code>OScofo</code> you just represent <code>&lt;DURATION&gt;</code> using number of tempos.</p> <p>So fraction representation is not support, mainly because something like <code>1</code> is ambiguous with <code>1/1</code>. And, for me, in fraction will be necessary to define the Time Unity to be a more precise language.</p> <p>Because that <code>OScofo</code> uses time representation relative to the value of <code>BPM</code> define previously. For example, if in your score you have the <code>BPM</code> set as  = 60 this means that</p> <ul> <li> duration value is <code>2</code>;</li> <li> duration value is <code>1</code>;</li> <li> is <code>0.5</code>,</li> <li> is <code>0.25</code></li> </ul> <p>if in your score you have the <code>BPM</code> set as  = 60 this means that</p> <ul> <li> duration value is <code>4</code>;</li> <li> duration value is <code>2</code>;</li> <li> is <code>1</code>,</li> <li> is <code>0.5</code></li> </ul> <p>For duration with dot, you sum it.</p> <p>Compound Time Signatures</p> <p>Avoid to use Compound Time Signatures as  = 60, because this means that the  will be equal to 0.33, prefer to use  = 180.</p>"},{"location":"score/events/#events_1","title":"Events","text":""},{"location":"score/events/#note","title":"<code>NOTE</code>","text":"<p><code>NOTE</code> events describes normal pitches. It must be defined as <code>NOTE &lt;PITCH&gt; &lt;DURATION&gt;</code>.</p> <ul> <li><code>NOTE C4 2</code></li> <li><code>NOTE 60 2</code></li> <li><code>NOTE C#5 0.3</code></li> <li><code>NOTE Bb3 0.25</code></li> </ul>"},{"location":"score/events/#trill","title":"<code>TRILL</code>","text":"<p><code>TRILL</code> events describes trill and tremolo events. It must be defined as <code>TRILL (&lt;PITCH1&gt; &lt;PITCH2&gt;) &lt;DURATION&gt;</code>.</p> <ul> <li><code>TRILL (C4 D4) 2</code></li> <li><code>TRILL (60 67) 2</code></li> <li><code>TRILL (C#5 E5) 0.3</code></li> <li><code>TRILL (Bb4 D5) 0.25</code></li> </ul>"},{"location":"score/events/#chord","title":"<code>CHORD</code>","text":"<p><code>CHORD</code> events describes chord, stable multiphonics, and others events. It must be defined as <code>CHORD (&lt;PITCH1&gt; &lt;PITCH2&gt;) &lt;DURATION&gt;</code>.</p> <ul> <li><code>CHORD (C4 E4 G4) 2</code></li> <li><code>CHORD (60 64 67) 2</code></li> <li><code>CHORD (C#5 E5 Ab5) 0.3</code></li> <li><code>CHORD (Bb4 D5 F4) 0.25</code></li> </ul>"},{"location":"score/events/#rest","title":"<code>REST</code>","text":"<p><code>REST</code> events describes rests. It must be defined as <code>REST &lt;DURATION&gt;</code>.</p> <ul> <li><code>REST 0.2</code></li> <li><code>REST 4</code></li> </ul>"},{"location":"score/intro/","title":"Intro","text":"<p>As <code>Antescofo</code>, <code>OScofo</code> uses a textual score where the composer must define the musical <code>EVENTS</code> and its consequences, what we call <code>ACTIONS</code>. In addition to that, <code>OScofo</code> has also some <code>CONFIG</code> keywords and the possibility to use <code>LUA</code> language to create interactive <code>ACTIONS</code>. In this section I explain all these concepts.</p> <ul> <li> <p> How to Configure the Score?</p> <p> Config Docs </p> </li> <li> <p> How to Set New Events?</p> <p> Events Docs </p> </li> </ul> <ul> <li> <p> How to add Actions?</p> <p> Actions Docs </p> </li> <li> <p> How to use Lua?</p> <p> Lua Doc </p> </li> </ul> <p>After Configuration, the Score will look like this:</p> <p> </p> <p>On it, we have three <code>EVENTS</code>, and a lot of <code>ACTIONS</code>.</p>"},{"location":"score/lua/","title":"Lua for Interactive Actions","text":"<p>Lua is an amazing language to create interactive events. You can read its 88 pages manual on English here or in Portuguese here.</p> <p>I am not present the language here, there are a lot of tutorials on the internet and YouTube.</p> <ul> <li>Very Complete here.</li> <li>Very Fast, Complex but yet Complete tutorial here.</li> <li>If you know how to program in another language here.</li> <li>Text here.</li> </ul> <p>What I will present is how to create these actions using <code>lua</code> and <code>oscofo</code>, <code>pd</code> and <code>max</code> module.</p>"},{"location":"score/lua/#oscofo-lua-module","title":"<code>oscofo</code> Lua Module","text":"<p>The <code>oscofo</code> module inside Lua can be used to get and set values of <code>oscofo</code> on the fly. It exposes several functions:</p> <ul> <li><code>oscofo.getKappa</code> <ul> <li><code>input</code>: No input.</li> <li><code>output</code>: Value of Kappa \\(\\kappa\\).</li> <li><code>description</code>: Get the value for Kappa. The closer it is to 10, the more synchronized the algorithm and the performance are.</li> </ul> </li> </ul> <ul> <li><code>oscofo.getBPM</code> <ul> <li><code>input</code>: No input.</li> <li><code>output</code>: Value of the current BPM;</li> <li><code>description</code>: Get the current BPM.</li> </ul> </li> </ul> <ul> <li><code>oscofo.getPitchProb</code> <ul> <li><code>input</code>: Frequency value in Hz, for example <code>oscofo.getPitchProb(440)</code> will return the probability of the pitch 440Hz being played.</li> <li><code>output</code>: Value of the probability.</li> <li><code>description</code>: Get the probability of being a specified pitch using the pitch templates.</li> </ul> </li> </ul> <ul> <li><code>oscofo.getSpectrumPower</code> <ul> <li><code>input</code>: No input.</li> <li><code>output</code>: Value of the probability.</li> <li><code>description</code>: Returns a table with the current FFT magnitude of all the bins.</li> </ul> </li> </ul>"},{"location":"score/lua/#pd-lua-module","title":"<code>pd</code> Lua Module","text":"<p>The <code>pd</code> module inside Lua allows interaction with Pure Data functionalities, exposing the following functions:</p> <ul> <li><code>pd.print</code> <ul> <li><code>input</code>: A string message to print.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Logs a message to the console, similar to Pure Data's <code>print</code> object.</li> </ul> </li> </ul> <ul> <li><code>pd.post</code> <ul> <li><code>input</code>: A string message to post.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Posts a message at the default verbosity level, used for general logging.</li> </ul> </li> </ul> <ul> <li><code>pd.error</code> <ul> <li><code>input</code>: A string error message.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Logs an error message in the Pure Data console, similar to a <code>print</code> with error severity.</li> </ul> </li> </ul> <ul> <li><code>pd.sendBang</code> <ul> <li><code>input</code>: A string representing the destination symbol in Pure Data.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a bang message to a specified destination in Pure Data.</li> </ul> </li> </ul> <ul> <li><code>pd.sendFloat</code> <ul> <li><code>input</code>: A float value and a string representing the destination symbol in Pure Data.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a floating-point number to a specified destination in Pure Data.</li> </ul> </li> </ul> <ul> <li><code>pd.sendSymbol</code> <ul> <li><code>input</code>: A string symbol and a string representing the destination symbol in Pure Data.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a symbol to a specified destination in Pure Data.</li> </ul> </li> </ul> <ul> <li><code>pd.sendList</code> <ul> <li><code>input</code>: A list of values (mixed types) and a string representing the destination symbol in Pure Data.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a list of values to a specified destination in Pure Data.</li> </ul> </li> </ul>"},{"location":"score/lua/#max-lua-module","title":"<code>max</code> Lua Module","text":"<p>The <code>max</code> module inside Lua allows interaction with Max functionalities, exposing the following functions:</p> <ul> <li><code>max.print</code> <ul> <li><code>input</code>: A string message to print.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Logs a message to the console, similar to Max's <code>print</code> object.</li> </ul> </li> </ul> <ul> <li><code>max.error</code> <ul> <li><code>input</code>: A string error message.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Logs an error message in the Max console, similar to a <code>print</code> with error severity.</li> </ul> </li> </ul> <ul> <li><code>max.sendBang</code> <ul> <li><code>input</code>: A string representing the receiver symbol in Max.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a bang message to a specified receiver in Max.</li> </ul> </li> </ul> <ul> <li><code>max.sendFloat</code> <ul> <li><code>input</code>: A float value and a string representing the destination symbol in Max.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a floating-point number to a specified destination in Max.</li> </ul> </li> </ul> <ul> <li><code>max.sendSymbol</code> <ul> <li><code>input</code>: A string symbol and a string representing the destination symbol in Max.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a symbol to a specified destination in Pure Data.</li> </ul> </li> </ul> <ul> <li><code>max.sendList</code> <ul> <li><code>input</code>: A list of values (mixed types) and a string representing the destination symbol in Max.  </li> <li><code>output</code>: no output.</li> <li><code>description</code>: Sends a list of values to a specified destination in Max.</li> </ul> </li> </ul>"}]}